<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=1024" />
    <link rel="icon" type="image/png" href="https://www.goodfreephotos.com/albums/vector-images/two-cards-vector-file.png"/>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
      integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO"
      crossorigin="anonymous"
    />
    <link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet" />  
    
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"
      integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
      crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" 
      integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49"
      crossorigin="anonymous"
    ></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"
      integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>

    <title>Virtual Deck - Play Anywhere with Anyone</title>
    <style>
      .jumbotron-fluid {
        background-color: white;
        padding-top: 0px;
      }
      #main {
        height: 90vh;
        padding: 20px 10%;
      }
      #mainrow {
        height: 100%;
        width: 100%;
      }
      .col-4 {
        height: 100%;
      }
      #playArea {
        box-shadow: 1px 1px 5px 1px #888888;
        height: 100%;
        padding: 20px 20px;
      }
      #playersArea {
        box-shadow: 1px 1px 5px 1px #888888;
        width: 100%;
        height: 60px;
        margin-bottom: 20px;
        padding: 5px 5px;
        line-height: 50px;
      }
      .get_deck {
        font-size: 30px;
      }
      h2 {
        color: grey;
      }
      .startText {
        color: black;
        text-align: center;
      }
      .col-7 {
        height: 100%;
        margin-left: 30px;
      }
      .col-7 > .row {
        padding: 20px;
        height: 48%;
        box-shadow: 1px 1px 5px 1px #888888;
      }
      #hand {
        margin-top: 30px;
      }
      .deckDesc {
        font-size: 3em;
        padding-top: 20px;
        color: black;
        text-align: center;
      }
      .col-form-label {
        font-size: 20px;
      }
      .card_deck {
        font-size: 15em;
        line-height: 100%;
      }
      .distrib-btn {
        margin-top: 10px;
      }
      #cardDisplay {
        font-size: 8em;
        line-height: 105%;
      }
      .card {
        display: inline-block;
        border: none;
        background-color: white;
      }
      .cardinPile {
        font-size: 10em;
        background-color: white;
        display: inline-block;
        line-height: 105%;
      }
      .card_owner {
        text-align: center;
        vertical-align: middle;
        background-color: white;
      }
      .card_layer {
        margin: 0 auto;
        display: inline-block;
      }
      #user_container {
        display: inline-block;
        justify-content: center;
        width: 80%;
        text-align:center;
      }
      .user_emoji {
        font-size: 2em;
      }
      .user_profil {
        margin: 10px;
        display: inline-block;
        line-height: 6px;
      }
      #button_sort {
        vertical-align: middle;
      }
      #option_reorder{
        vertical-align: middle;
      }
      #hand_header {
        line-height: 60px;
      }
      #cards_control {
        visibility: hidden; 
        margin-left: 1em;
      }
      

    </style>
  </head>
  <script>
    const emojis = ['😄','😃','😀','😊','☺','😉','😍','😘','😚','😗','😙','😜','😝','😛','😳','😁','😔',
      '😌','😒','😞','😣','😢','😂','😭','😪','😥','😰','😅','😓','😩','😫','😨','😱','😠','😡','😤','😖',
      '😆','😋','😷','😎','😴','😵','😲','😟','😦','😧','😈','👿','😮','😬','😐','😕','😯','😶','😇','😏','😑',
      '👲','👳','👮','👷','💂','👶','👦','👧','👨','👩','👴','👵','👱','👼','👸','😺','😸','😻','😽','😼','🙀',
      '😿','😹','😾','👹','👺','🙈','🙉','🙊','💀','👽','💩'];

    const suit = ["Clubs", "Diamonds", "Spades", "Hearts"];

    const rank_normal = 
      ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"];
    const unicode_normal = [
      ["🃑", "🃒", "🃓", "🃔", "🃕", "🃖", "🃗", "🃘", "🃙", "🃚", "🃛", "🃝", "🃞"], //  Clubs (trefle)
      ["🃁", "🃂", "🃃", "🃄", "🃅", "🃆", "🃇", "🃈", "🃉", "🃊", "🃋", "🃍", "🃎"], //  Diamonds (carreau)
      ["🂡", "🂢", "🂣", "🂤", "🂥", "🂦", "🂧", "🂨", "🂩", "🂪", "🂫", "🂭", "🂮"], //  Spades (pique)
      ["🂱", "🂲", "🂳", "🂴", "🂵", "🂶", "🂷", "🂸", "🂹", "🂺", "🂻", "🂽", "🂾"] //  Hearts (coeur)
    ]; 

    const rank_cavaliers = 
      ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "C", "Q", "K"];
    const unicode_cavaliers = [
      ["🃑", "🃒", "🃓", "🃔", "🃕", "🃖", "🃗", "🃘", "🃙", "🃚", "🃛", "🃜", "🃝", "🃞"], //  Clubs (trefle)
      ["🃁", "🃂", "🃃", "🃄", "🃅", "🃆", "🃇", "🃈", "🃉", "🃊", "🃋", "🃌", "🃍", "🃎"], //  Diamonds (carreau)
      ["🂡", "🂢", "🂣", "🂤", "🂥", "🂦", "🂧", "🂨", "🂩", "🂪", "🂫", "🂬", "🂭", "🂮"], //  Spades (pique)
      ["🂱", "🂲", "🂳", "🂴", "🂵", "🂶", "🂷", "🂸", "🂹", "🂺", "🂻", "🂼", "🂽", "🂾"]  //  Hearts (coeur)
    ]; 

    var users = new Map();
    var tricks = {};
    var user = -1;

    var deck = [];
    var pile = [];
    var my_hand = [];
    var socket = io();
    var options = {};

    socket.emit("connectRoom", "<%= data %>");

    window.onbeforeunload = function(event) {
      event.returnValue = "Refreshing the page will make you disconnect from the game!";
    };

    socket.on("connectToRoom", function() {
      /*First initialisation*/
      if (user == -1) {
        var randomRoger = "roger" + Math.floor(Math.random() * 100);
        var nameTemp = prompt("What's your name ?", randomRoger);
        if (nameTemp == null) {
          nameTemp = randomRoger
        }
        user = {
          id: socket.id,
          date: Date.now(),
          name: nameTemp, 
          emoji: emojis[Math.floor(Math.random() * emojis.length)]
        }
      }
      deck = undefined;
      pile = [];
      my_hand = [];
      options = {};
      tricks = {};
      // Redraw everything at each connection
      $("#your_hand").text("Your Hand " + user.name);
      initThePage()
      socket.emit("userConnected", user )
    });

    socket.on("removeUser", function(userID) {
        users.delete(userID)
        drawUsersInfos()
        drawDeck();
    })

    socket.on("onUpdateHand", function(data) {
      console.log("===== Update Hand =====");
      console.log(data);
      my_hand = data;
      drawHand();
    });

    socket.on("onUpdateData", function(data) {
      console.log(">>>>> New data broadcast >>>>>");
      console.log(data);
      if (data.options != undefined) {
        options = data.options;
      }
      if (data.hand != undefined) {
        my_hand = data.hand;
        drawHand();
      }
      if (data.deck != undefined) {
        deck = data.deck;
        drawDeck();
      }
      if (data.pile != undefined) {
        pile = data.pile;
        drawPile();
      }
      if(data.user != undefined) {
        users.set(data.user.id, data.user)
        drawUsersInfos()
      }
      if(data.tricks != undefined) {
        tricks = data.tricks;
        drawUsersInfos()
      }
    });
  </script>
  <body>
    <div id="screen" class="jumbotron jumbotron-fluid">
      <div id="main" class="container-fluid">
        <div id="playersArea" class="col-11">
          <h2 class="player_number" style="display:inline;">Players</h2>
          <div id="user_container"></div>
        </div>
        <div id="mainrow" class="row">
          <div id="playArea" class="col-4">
            <h2>Playing Area</h2>
          </div>
          <div class="col-7">
            <div id="mainDeck" class="row"></div>
            <div id="hand" class="row">
              <div class="col-12">
                <div id="hand_header">
                  <h2 style="vertical-align: middle;" class="d-inline-block" id="your_hand"> Your Hand </h2>  
                  <div id="cards_control" class="d-inline-block">
                    <button class = "d-inline-block btn btn-info" onclick = "onSortCard()"> Sort </button>
                    <input  id="option_reorder" class ="d-inline-block" type="checkbox" data-toggle="toggle" 
                            data-width="90"
                            data-on="Reorder" 
                            onclick="drawHand()"
                            data-off="Play"/>
                  </div>
                </div>
                <div id="cardDisplay"></div>
                <div id="instruction">
                  To add more user to this room share this page URL with your friends! <br /><br />
                  After the game started and after the dealer give you cards: <br />
                  - Click on a card from your hand (this area) to play it. <br />
                  - Click on a card from the playing area to take it back to your hand (yaniv or if you did a mistake). <br />
                  - You can drag and drop a card from your hand to rearrange them by toggling the play/reorder switch <br />
                  - In pile mode, you can move the card from the pile to see them.
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
  <script>
    function start() {
      options["cavaliers"] = $("#option_cavaliers").is(":checked");
      options["tricks"] = $("#option_tricks").is(":checked");
      options["stack_visible"] = true;

      resetGame();
    }

    function initThePage() {
      drawDeck()
      drawPile()
      drawHand()
      $("#instruction").show();
    }

    function clearPlayingArea() {
      if (confirm("Are you sure you want to clear the playing area?")) {
        socket.emit("updateData", {what: "clear playing area", pile: []});
      }
    }

    function claimTrick() {
      if (confirm("Are you sure you won the trick?")) {
        tricks[user.id]
        if (tricks[user.id] == undefined) {
          tricks[user.id]=[]
        }
        tricks[user.id].push(pile)
        socket.emit("updateData", {what: "claim tricks", tricks: tricks, pile: []});
      }
    }

    function getUserID() {
      return users.get(socket.id);
    }

    function shuffleDeck() {
      socket.emit("shuffleDeck", deck);
    }

    function resetGame() {
      socket.emit("resetGame", options);
    }

    function takeOne() {
      var data = { numCards: 1, deck: deck, hand: my_hand, user: socket.id };
      socket.emit("takeCards", data);
    }

    function updatePile() {
      socket.emit("updateData", { what: "update pile", pile: pile, options: options });
    }

    function distributeCards() {
      var numCards = $("#distribute_card").val();
      if ($("#all_cards").is(":checked")) {
        numCards = -1;
      }
      data = { numCards: numCards, deck: deck, hand: my_hand};
      socket.emit("distribute", data);
    }

    function drawUsersInfos(){
      $("#user_container").empty()
      var userArray  = Array.from(users.values());
      userArray.sort((a,b) => a.date - b.date)
      userArray.forEach( user => {
        var tricksNumber = ""
        var userTricks = tricks[user.id]
        if(userTricks != undefined) {
          tricksNumber = " 🂠 <b>"+userTricks.length+"</b>"
        }
        var content = `
            <div class="user_profil">
              <p class="user_emoji">${user.emoji}</p>
              <p>${user.name}${tricksNumber}</p>
            </div>
        `
        $("#user_container").append(content)
      })

      $(".player_number").text("Players: " + users.size);
    }

    function drawDeck() {
      $("#mainDeck").empty();
      var content = ""
      if (deck == undefined) {
        content = `
          <div class="col-6 form-group">
            <h2 class="startText">Everyone in?</h2>
            <br /><br />
            <button class="btn btn-outline-dark btn-lg btn-block get_deck" onclick="start()">Start</button>
            <br />
            <input type="checkbox" class="form-check-input" id="option_cavaliers" checked/>
            <label class="form-check-label" for="option_cavaliers">Include cavaliers (56 cards) </label>
            <br />
            <input type="checkbox" class="form-check-input" id="option_tricks" checked/>
            <label class="form-check-label" for="option_tricks">Can we claim tricks (as for tarot)</label>
          </div>
          <div class="col-6 container h-100">
            <div class="row h-100 justify-content-center align-items-center">
                <h2>Room <%= data %></h2>
            </div>
          </div>
        `
      } else if (deck.length == 0) {
        content = `
        <div class = 'col-6'><h2>Deck is empty</h2>
          <button onclick = 'resetGame()' class = 'btn btn-outline-dark btn-lg btn-block'>Get back cards</button><br>
        </div>
        <div class="col-6 container h-100">
          <div class="row h-100 justify-content-center align-items-center">
            <span class="card_deck">∅</span>
          </div>
        </div>
        `
      } else  {
        var originalLength = options.cavaliers ? 56 : 52;

        content = "<div class = 'col-6'><h2>Deck: " + deck.length + " / " + originalLength + " cards</h2><br>";
        if (originalLength == deck.length) {
          content +="<button onclick = 'shuffleDeck()' class = 'btn btn-outline-dark btn-lg btn-block'>Shuffle Cards</button><br>";
        } else {
          content +="<button onclick = 'resetGame()' class = 'btn btn-outline-dark btn-lg btn-block'>Get back cards</button><br>";
        }

        var message = users.size == 1 ? "Your are the only player connected! "
                                        : "Card to distribute to each player (" + users.size + " players)";

        content += ` 
          <button class = 'btn btn-outline-dark btn-lg btn-block' onclick = 'takeOne()'>Take 1 Card</button><br>
          <div class="control-group form-inline">
            <label class="mb-2" for="distribute_card">${message}</label>
            <input class= "mb-2" type = "number" id = "distribute_card" placeholder = "number of cards" disabled />
            <div class="mx-sm-3 mb-2"> Or </div>'
            <label class="form-check-label mb-2" for="all_cards">All cards</label>
            <input type='checkbox' class='form-check-input mb-2' id='all_cards' checked onclick='onOptionDistributeAllCard()'>
          </div>
              `
        content += "</div>";
        content += `
          <div class = 'col-6'>
            <span style="margin-left:25%" class="card_deck">🂠</span>
            <button style="margin-left:25%" class='col-6 distrib-btn btn btn-primary ' onclick = 'distributeCards()'>Distribute</button>
          </div>
        `
      }
      $("#mainDeck").append(content);
    }

    function drawHand() {

      $("#instruction").hide();
      $("#your_hand").empty();
      var content = ""
      if (my_hand.length > 1) {
        content = `Your Hand ${user.name} : ${my_hand.length} cards`
        $("#cards_control").visible()
      }else {
        content = `Your Hand ${user.name}`
        $("#cards_control").invisible()
      }
      $("#your_hand").append(content);

      $("#cardDisplay").empty();

      $("#cardDisplay").sortable({disabled: true})
      $("#cardDisplay").sortable({
          start: function(event, ui) {
            ui.item.data("originIndex", ui.item.index());
          },
          change: function(event, ui) {
            var originIndex = ui.item.data("originIndex");
            var currentIndex = ui.placeholder.index();
            ui.item.data("swapIndex", currentIndex);
          },
          stop: function(event, ui) {
            var originIndex = ui.item.data("originIndex");
            var swapIndex = ui.item.data("swapIndex");
            var originElement = my_hand[originIndex];
  
            if (originIndex < swapIndex) {
              swapIndex -= 1;
              if (swapIndex < 0) swapIndex = 0;
            }
            my_hand.splice(originIndex, 1);
            my_hand.splice(swapIndex, 0, originElement);
          }
        });

      if($("#option_reorder").prop("checked")) {
        $('#cardDisplay').sortable('enable');
      } else {
        $('#cardDisplay').sortable('disable');
      } 
      var rank = options["cavaliers"] ? rank_cavaliers : rank_normal;
      var unicode = options["cavaliers"] ? unicode_cavaliers : unicode_normal;

      for (var i = 0; i < my_hand.length; i++) {
        card = my_hand[i];
        var $item = $('<div class="card"/>').text(unicode[suit.indexOf(card["suit"])][rank.indexOf(card["rank"])]);
        if (card["suit"] == "Hearts" || card["suit"] == "Diamonds") {
          $item.css({ color: "red" });
        } else {
          $item.css({ position: "relative" });
        }
        $("#cardDisplay").append($item);
      }
    }

    function drawPile() {
      var rank = options["cavaliers"] ? rank_cavaliers : rank_normal;
      var unicode = options["cavaliers"] ? unicode_cavaliers : unicode_normal;
      var isChecked = options["stack_visible"]
      
      $("#playArea").empty();
      var content = `
        <h2>Playing Area</h2>
        <div class = "col-6 form-group">
          <input type='checkbox' class='form-check-input' id='option_stack' onclick = 'onOptionStack()' ${isChecked ? "checked" : ""} />
          <label class="form-check-label" for="option_stack">View all cards</label>
        </div>`

      if(options.tricks) {
        if(pile.length == users.size) {
          content += '<button id="are_button" class = "btn btn-outline-dark btn-lg btn-block" onclick = "claimTrick()">Claim trick</button>'
        }
      } else {
        content += '<button id="are_button" class = "btn btn-outline-dark btn-lg btn-block" onclick = "clearPlayingArea()">Clear</button>'
      }
      
      $("#playArea").append(content);

      for (var i = 0; i < pile.length; i++) {
        var j = options["stack_visible"] ? pile.length - 1 - i : i;
        card = pile[j];
        var $item = $('<div class="cardinPile"/>').text(
          unicode[suit.indexOf(card["suit"])][rank.indexOf(card["rank"])]
        );
        if (card["suit"] == "Hearts" || card["suit"] == "Diamonds") {
          $item.css({ color: "red" });
        }
        var $layer = $('<div class="card_layer"/>');
        var $owner = $('<div class="card_owner"/>').text(card["username"]);
        $layer.append($item);
        $layer.append($owner);
        if (!options["stack_visible"]) {
          $layer.draggable({ containment: "parent" });
          $layer.css({ position: "absolute" });
        }
        $("#playArea").append($layer);
      }
    }

    function onSortCard() {
      my_hand.sort(function(a, b) {
        if (suit.indexOf(a.suit) < suit.indexOf(b.suit)) return -1;
        if (suit.indexOf(a.suit) > suit.indexOf(b.suit)) return 1;

        return rank_cavaliers.indexOf(a.rank) - rank_cavaliers.indexOf(b.rank);
      });
      drawHand();
    }

    function onOptionStack() {
      options["stack_visible"] = $("#option_stack").is(":checked");
      updatePile();
    }

    function onOptionDistributeAllCard() {
      if ($("#all_cards").is(":checked")) {
        $("#distribute_card").prop("disabled", true);
      } else {
        $("#distribute_card").prop("disabled", false);
      }
    }

    function debug(object) {
        console.log("=== DEBUG ===")
        console.log(object)
        console.log("=============")
    }

    

    // Move card from you deck to the pile
    $("body").on("click", ".card", function() {
      
      // If reorder possible do nothing
      if($("#option_reorder").prop("checked")) {
        return
      }

      var cardIndex = $(".card").index($(this));
      var card = my_hand[cardIndex];
      console.log("Click on your card on " + card);

      my_hand.splice(cardIndex, 1);
      $(".card:eq(" + cardIndex + ")").remove();
      card["username"] = user.name;
      pile.push(card);

      updatePile();
      drawHand();
    });

    // Move card from the pile to your deck
    $("body").on("click", ".cardinPile", function() {
      var cardIndex = $(".cardinPile").index($(this));
      var cardIndex = options["stack_visible"] ? pile.length - 1 - cardIndex : cardIndex;
      var card = pile[cardIndex];
      console.log("Click on the pile card on " + card);

      my_hand.push(card);
      pile.splice(cardIndex, 1);

      updatePile();
      drawHand();
    });

    $(document).on("keypress", function(event) {
      var keycode = event.keyCode ? event.keyCode : event.which;
      if (keycode == "13") {
        distributeCards();
      }
    });

    $('#option_reorder').change(function() {
        drawHand()
    })

    jQuery.fn.visible = function() {
      return this.css('visibility', 'visible');
    };

    jQuery.fn.invisible = function() {
      return this.css('visibility', 'hidden');
    };
  </script>
</html>
