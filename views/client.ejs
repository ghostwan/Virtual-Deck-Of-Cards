<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <link rel="icon" type="image/png" href="https://www.goodfreephotos.com/albums/vector-images/two-cards-vector-file.png"/>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" 
      integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49"
      crossorigin="anonymous"
    ></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"
      integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy"
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
      integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO"
      crossorigin="anonymous"
    />
    <title>Virtual Deck - Play Anywhere with Anyone</title>
    <style>
      .jumbotron-fluid {
        background-color: white;
      }
      #main {
        height: 90vh;
        padding: 20px 10%;
      }
      #mainrow {
        height: 100%;
        width: 100%;
      }
      .col-4 {
        height: 100%;
      }
      #playArea {
        box-shadow: 1px 1px 5px 1px #888888;
        height: 100%;
        padding: 20px 20px;
      }
      .get_deck {
        font-size: 30px;
      }
      h1 {
        color: grey;
      }
      .startText {
        color: black;
        text-align: center;
      }
      .col-7 {
        height: 100%;
        margin-left: 30px;
      }
      .col-7 > .row {
        padding: 20px;
        height: 48%;
        box-shadow: 1px 1px 5px 1px #888888;
      }
      #hand {
        margin-top: 30px;
      }
      .deckDesc {
        font-size: 3em;
        padding-top: 20px;
        color: black;
        text-align: center;
      }
      .col-form-label {
        font-size: 20px;
      }
      span {
        font-size: 15em;
        line-height: 100%;
        margin-left: 23%;
      }
      .distrib-btn {
        margin-left: 25%;
        margin-top: 10px;
      }
      #cardDisplay {
        font-size: 8em;
        line-height: 105%;
      }
      .card {
        display: inline-block;
        border: none;
        background-color: white;
      }
      .cardinPile {
        font-size: 10em;
        background-color: white;
        display: inline-block;
        line-height: 105%;
      }
      .card_owner {
        text-align: center;
        vertical-align: middle;
        background-color: white;
      }
      .card_layer {
        margin: 0 auto;
        display: inline-block;
      }
    </style>
  </head>
  <script>
    const suit = ["Clubs", "Diamonds", "Spades", "Hearts"];

    const rank_normal = 
      ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"];
    const unicode_normal = [
      ["🃑", "🃒", "🃓", "🃔", "🃕", "🃖", "🃗", "🃘", "🃙", "🃚", "🃛", "🃝", "🃞"], //  Clubs (trefle)
      ["🃁", "🃂", "🃃", "🃄", "🃅", "🃆", "🃇", "🃈", "🃉", "🃊", "🃋", "🃍", "🃎"], //  Diamonds (carreau)
      ["🂡", "🂢", "🂣", "🂤", "🂥", "🂦", "🂧", "🂨", "🂩", "🂪", "🂫", "🂭", "🂮"], //  Spades (pique)
      ["🂱", "🂲", "🂳", "🂴", "🂵", "🂶", "🂷", "🂸", "🂹", "🂺", "🂻", "🂽", "🂾"] //  Hearts (coeur)
    ]; 

    const rank_cavaliers = 
      ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "C", "Q", "K"];
    const unicode_cavaliers = [
      ["🃑", "🃒", "🃓", "🃔", "🃕", "🃖", "🃗", "🃘", "🃙", "🃚", "🃛", "🃜", "🃝", "🃞"], //  Clubs (trefle)
      ["🃁", "🃂", "🃃", "🃄", "🃅", "🃆", "🃇", "🃈", "🃉", "🃊", "🃋", "🃌", "🃍", "🃎"], //  Diamonds (carreau)
      ["🂡", "🂢", "🂣", "🂤", "🂥", "🂦", "🂧", "🂨", "🂩", "🂪", "🂫", "🂬", "🂭", "🂮"], //  Spades (pique)
      ["🂱", "🂲", "🂳", "🂴", "🂵", "🂶", "🂷", "🂸", "🂹", "🂺", "🂻", "🂼", "🂽", "🂾"]  //  Hearts (coeur)
    ]; 

    var users = new Map();
    var name = -1;
    var deck = [];
    var pile = [];
    var my_hand = [];
    var socket = io();
    var options = {};

    socket.emit("connectRoom", "<%= data %>");

    window.onbeforeunload = function(event) {
      event.returnValue = "Refreshing the page will make you disconnect from the game!";
    };

    socket.on("connectToRoom", function() {
      if (name == -1) {
        name = prompt("What's your name ?", "roger" + Math.floor(Math.random() * 100));
        $("#your_hand").text("Your Hand " + name);
      }
      deck = undefined;
      pile = [];
      my_hand = [];
      options = {};

      // Redraw everything at each connection
      drawDeck()
      drawPile()
      drawHand()
      $("#instruction").show();

      var newData = { room: "<%= data %>", name: name, id: socket.id };
      socket.emit("userConnected", newData )
    });

    socket.on("addUser", function(data) {
        users.set(data.id, {name: data.name})
        updateUserList(data["socketUsers"])
    })

    socket.on("onUpdateHand", function(data) {
      console.log("===== Update Hand =====");
      console.log(data);
      my_hand = data;
      drawHand();
    });

    socket.on("onUpdateData", function(data) {
      console.log(">>>>> New data broadcast >>>>>");
      console.log(data);
      if (data["options"] != undefined) {
        options = data["options"];
      }
      if (data["hand"] != undefined) {
        my_hand = data["hand"];
        drawHand();
      }
      if (data["deck"] != undefined) {
        deck = data["deck"];
        drawDeck();
      }
      if (data["pile"] != undefined) {
        pile = data["pile"];
        drawPile();
      }
      // if (data["user"] != undefined) {
      //   // users[] = data["user"];
      //   drawUsersInfos();
      // }
    });
  </script>
  <body>
    <div class="jumbotron jumbotron-fluid">
      <div id="main" class="container-fluid">
        <div id="mainrow" class="row">
          <div id="playArea" class="col-4">
            <h1>Playing Area</h1>
          </div>
          <div class="col-7">
            <div id="mainDeck" class="row"></div>
            <div id="hand" class="row">
              <div class="col-12">
                <h1 id="your_hand">Your Hand</h1>
                <div id="cardDisplay"></div>
                <div id="instruction">
                  After the game started and after the dealer give you cards.
                  <br />Click on a card from your hand (this area) to play it. <br />Click on a card from the playing
                  area to take it back to your hand (yaniv or if you did a mistake). <br />You can drag and drop a card
                  from your hand to rearrange them. <br />You can move the card from the pile to see them.
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
  <script>
    function start() {
      options["cavaliers"] = $("#option_cavaliers").is(":checked");
      options["tricks"] = $("#option_tricks").is(":checked");
      options["stack_visible"] = true;

      socket.emit("getDeck", { room: "<%= data %>", options: options });
    }

    function clearPlayingArea() {
      if (confirm("Are you sure you want to clear the playing area?")) {
        data = { room: "<%= data %>" };
        socket.emit("clearPlayingArea", data);
      }
    }

    function updateUserList(socketUsers){
      users.forEach( (user, key) => {
        if (!socketUsers.includes(key)) {
          console.log(`User ${key} doesn't exist anymore, removing...`)
          users.delete(key)
        }
      })
      drawUsersInfos()
    }
    function getUserID() {
      return users.get(socket.id);
    }

    function shuffleDeck() {
      data = { room: "<%= data %>", deck: deck };
      socket.emit("shuffleDeck", data);
    }

    function resetGame() {
      data = { room: "<%= data %>", options: options };
      socket.emit("resetGame", data);
    }

    function addPile() {
      data = { room: "<%= data %>", pile: pile };
      socket.emit("addPile", data);
    }

    function takeOne() {
      data = { room: "<%= data %>", numCards: 1, deck: deck, hand: my_hand, user: socket.id };
      socket.emit("takeCards", data);
    }

    function updatePile() {
      data = { room: "<%= data %>", pile: pile, options: options };
      socket.emit("updateData", data);
    }

    function distributeCards() {
      var numCards = $("#distribute_card").val();
      if ($("#all_cards").is(":checked")) {
        numCards = -1;
      }
      data = { room: "<%= data %>", numCards: numCards, deck: deck, hand: my_hand};
      socket.emit("distribute", data);
    }

    function drawUsersInfos(){
      $("#numPlayers").text("Players: " + users.size);
    }

    function drawDeck() {
      $("#mainDeck").empty();
      var content = ""
      if (deck == undefined) {
        content = `
        <div class="col-6 form-group">
            <h1 class="startText">Everyone in?</h1>
            <br /><br />
            <button class="btn btn-outline-dark btn-lg btn-block get_deck" onclick="start()">Start</button>
            <br />
            <input type="checkbox" class="form-check-input" id="option_cavaliers" />
            <label class="form-check-label" for="option_cavaliers">Include cavaliers (56 cards) </label>
            <br />
            <input type="checkbox" class="form-check-input" id="option_tricks" />
            <label class="form-check-label" for="option_tricks">Can we claim tricks (as for tarot)</label>
          </div>
          <div class="col-6">
            <h1 class="deckDesc">Room <%= data %></h1>
            <h1 id="numPlayers" class="deckDesc">Players: 1</h1>
        </div>
        `
      } else if (deck.length == 0) {
        content = `
        <div class = 'col-6'><h1>Deck is empty</h1>
          <button onclick = 'resetGame()' class = 'btn btn-outline-dark btn-lg btn-block'>Get back cards</button><br>
        </div>
        <div class = 'col-6'><span>∅</span></div>
        `
      } else  {
        var originalLength = options["cavaliers"] ? 56 : 52;

        content = "<div class = 'col-6'><h1>Deck: " + deck.length + " / " + originalLength + " cards</h1><br>";
        if (originalLength == deck.length) {
          content +="<button onclick = 'shuffleDeck()' class = 'btn btn-outline-dark btn-lg btn-block'>Shuffle Cards</button><br>";
        } else {
          content +="<button onclick = 'resetGame()' class = 'btn btn-outline-dark btn-lg btn-block'>Get back cards</button><br>";
        }

        var message = users.size == 1 ? "Your are the only player connected! "
                                        : "Card to distribute to each player (" + users.size + " players)";

        content += ` 
          <button class = 'btn btn-outline-dark btn-lg btn-block' onclick = 'takeOne()'>Take 1 Card</button><br>
          <div class="control-group form-inline">
            <label class="mb-2" for="distribute_card">${message}</label>
            <input class= "mb-2" type = "number" id = "distribute_card" placeholder = "number of cards" disabled />
            <div class="mx-sm-3 mb-2"> Or </div>'
            <label class="form-check-label mb-2" for="all_cards">All cards</label>
            <input type='checkbox' class='form-check-input mb-2' id='all_cards' checked onclick='onOptionDistributeAllCard()'>
          </div>
              `
        content += "</div>";
        content += `
          <div class = 'col-6' ><span>🂠</span>
            <button class='col-6 distrib-btn btn btn-primary ' onclick = 'distributeCards()'>Distribute</button>
          </div>
        `
      }
      $("#mainDeck").append(content);
    }

    function drawHand() {
      $("#your_hand").empty();

      if (my_hand.length > 1) {
        $("#your_hand").append("Your Hand " +name +": " +my_hand.length +
            ' cards <button class = "btn btn-secondary" onclick = "onSortCard()"> sort </button>'
        );
      } else {
        $("#your_hand").append("Your Hand " + name);
      }
      $("#instruction").hide();
      $("#cardDisplay").empty();
      $("#cardDisplay").sortable({
        start: function(event, ui) {
          ui.item.data("originIndex", ui.item.index());
        },
        change: function(event, ui) {
          var originIndex = ui.item.data("originIndex");
          var currentIndex = ui.placeholder.index();
          ui.item.data("swapIndex", currentIndex);
        },
        stop: function(event, ui) {
          var originIndex = ui.item.data("originIndex");
          var swapIndex = ui.item.data("swapIndex");
          var originElement = my_hand[originIndex];

          if (originIndex < swapIndex) {
            swapIndex -= 1;
            if (swapIndex < 0) swapIndex = 0;
          }
          my_hand.splice(originIndex, 1);
          my_hand.splice(swapIndex, 0, originElement);
        }
      });
      var rank = options["cavaliers"] ? rank_cavaliers : rank_normal;
      var unicode = options["cavaliers"] ? unicode_cavaliers : unicode_normal;

      for (var i = 0; i < my_hand.length; i++) {
        card = my_hand[i];
        var $item = $('<div class="card"/>').text(unicode[suit.indexOf(card["suit"])][rank.indexOf(card["rank"])]);
        if (card["suit"] == "Hearts" || card["suit"] == "Diamonds") {
          $item.css({ color: "red" });
        } else {
          $item.css({ position: "relative" });
        }
        $("#cardDisplay").append($item);
      }
    }

    function drawPile() {
      var rank = options["cavaliers"] ? rank_cavaliers : rank_normal;
      var unicode = options["cavaliers"] ? unicode_cavaliers : unicode_normal;
      var checked = options["stack_visible"] ? "checked" : "";
      
      $("#playArea").empty();
      var content = `
        <h1>Playing Area</h1>
        <div class = "col-6 form-group">
          <input type='checkbox' class='form-check-input' id='option_stack' onclick = 'onOptionStack()' ${checked} />
          <label class="form-check-label" for="option_stack">View all cards</label>
        </div>
        <button id="are_button" class = "btn btn-outline-dark btn-lg btn-block get_deck onclick = "clearPlayingArea()">Clear</button>
      `
      $("#playArea").append(content);

      for (var i = 0; i < pile.length; i++) {
        var j = options["stack_visible"] ? pile.length - 1 - i : i;
        card = pile[j];
        var $item = $('<div class="cardinPile"/>').text(
          unicode[suit.indexOf(card["suit"])][rank.indexOf(card["rank"])]
        );
        if (card["suit"] == "Hearts" || card["suit"] == "Diamonds") {
          $item.css({ color: "red" });
        }
        var $layer = $('<div class="card_layer"/>');
        var $owner = $('<div class="card_owner"/>').text(card["username"]);
        $layer.append($item);
        $layer.append($owner);
        if (!options["stack_visible"]) {
          $layer.draggable({ containment: "parent" });
          $layer.css({ position: "absolute" });
        }
        $("#playArea").append($layer);
      }
    }

    function onSortCard() {
      my_hand.sort(function(a, b) {
        if (suit.indexOf(a.suit) < suit.indexOf(b.suit)) return -1;
        if (suit.indexOf(a.suit) > suit.indexOf(b.suit)) return 1;

        return rank_cavaliers.indexOf(a.rank) - rank_cavaliers.indexOf(b.rank);
      });
      drawHand();
    }

    function onOptionStack() {
      options["stack_visible"] = $("#option_stack").is(":checked");
      updatePile();
    }

    function onOptionDistributeAllCard() {
      if ($("#all_cards").is(":checked")) {
        $("#distribute_card").prop("disabled", true);
      } else {
        $("#distribute_card").prop("disabled", false);
      }
    }

    function debug(object) {
        console.log("=== DEBUG ===")
        console.log(object)
        console.log("=============")
    }

    // Move card from you deck to the pile
    $("body").on("click", ".card", function() {
      var cardIndex = $(".card").index($(this));
      var card = my_hand[cardIndex];
      console.log("Click on your card on " + card);

      my_hand.splice(cardIndex, 1);
      $(".card:eq(" + cardIndex + ")").remove();
      card["username"] = name;
      pile.push(card);

      updatePile();
      drawHand();
    });

    // Move card from the pile to your deck
    $("body").on("click", ".cardinPile", function() {
      var cardIndex = $(".cardinPile").index($(this));
      var cardIndex = options["stack_visible"] ? pile.length - 1 - cardIndex : cardIndex;
      var card = pile[cardIndex];
      console.log("Click on the pile card on " + card);

      my_hand.push(card);
      pile.splice(cardIndex, 1);

      updatePile();
      drawHand();
    });

    $(document).on("keypress", function(event) {
      var keycode = event.keyCode ? event.keyCode : event.which;
      if (keycode == "13") {
        distributeCards();
      }
    });
  </script>
</html>
